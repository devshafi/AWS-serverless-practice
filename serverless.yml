# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: myserverlessproject
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  profile: default
  httpApi:
    cors: true
  environment:
    tableName: ${self:custom.tableName}

  # allowing lambdas to access dynamodb 
  iamRoleStatements:
    - Effect: Allow
      Action: 
          - dynamodb:*
      Resource: '*'


# plugins provided by serverless
plugins:
    - serverless-s3-sync
    - serverless-webpack

# webpack upload lambdas individually
package:
  individually: true

custom:
    s3Sync:
        - bucketName: my-serverless-project-upload-bucket-061996
          localDir: uploadData
    tableName: player-points

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
      - httpApi:
          path: /get-user/{ID}
          method: get
  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
      - httpApi:
          path: /get-player-score/{ID}
          method: get
  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    events:
      - httpApi:
          path: /create-player-score/{ID}
          method: post

# you can add CloudFormation resource templates here
resources:
 Resources:
   DemoBucketUpload:
     Type: AWS::S3::Bucket
     Properties:
       BucketName: my-serverless-project-upload-bucket-061996
   MyDynamoDBTable:
       Type: AWS::DynamoDB::Table
       Properties:
         TableName: ${self:custom.tableName}
         AttributeDefinitions:
           - AttributeName: ID
             AttributeType: S
         KeySchema:
           - AttributeName: ID
             KeyType: HASH
         BillingMode: PAY_PER_REQUEST

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
